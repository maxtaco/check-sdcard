// Generated by IcedCoffeeScript 1.8.0-a
(function() {
  var File, Indexer, Runner, fs, iced, log, main, make_esc, minimist, path, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  path = require('path');

  make_esc = require('iced-error').make_esc;

  log = require('iced-logger');

  minimist = require('minimist');

  File = (function() {
    function File(id, path) {
      this.id = id;
      this.path = path;
    }

    return File;

  })();

  Indexer = (function() {
    function Indexer(dir) {
      this.dir = dir;
      this.map = {};
      this.ord = [];
    }

    Indexer.prototype._index = function(d, cb) {
      var esc, f, file, files, full, stat, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Indexer.index");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/iced/check-sdcard/src/main.iced",
            funcname: "Indexer._index"
          });
          fs.readdir(d, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return files = arguments[0];
              };
            })(),
            lineno: 23
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _i, _len, _ref, _results, _while;
            _ref = files;
            _len = _ref.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                file = _ref[_i];
                if (!(file === "." || file === "..")) {
                  full = path.join(d, file);
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/iced/check-sdcard/src/main.iced",
                      funcname: "Indexer._index"
                    });
                    fs.stat(full, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return stat = arguments[0];
                        };
                      })(),
                      lineno: 26
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      if (stat.isDirectory()) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/home/max/src/iced/check-sdcard/src/main.iced",
                            funcname: "Indexer._index"
                          });
                          _this._index(full, esc(__iced_deferrals.defer({
                            lineno: 28
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k(file.match(/^P[0-9]{7}\.(MOV|JPG|RW2)$/) ? (f = new File(file, full), _this.map[file] = f, _this.ord.push(file)) : void 0);
                      }
                    })(_next);
                  });
                } else {
                  return _continue();
                }
              }
            };
            _while(__iced_k);
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Indexer.prototype.index = function(cb) {
      return this._index(this.dir, cb);
    };

    return Indexer;

  })();

  Runner = (function() {
    function Runner() {}

    Runner.prototype.index = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Runner::index");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/iced/check-sdcard/src/main.iced",
            funcname: "Runner.index"
          });
          _this.sd.index(esc(__iced_deferrals.defer({
            lineno: 48
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/iced/check-sdcard/src/main.iced",
              funcname: "Runner.index"
            });
            _this.archive.index(esc(__iced_deferrals.defer({
              lineno: 49
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    Runner.prototype.parse_args = function(cb) {
      var err;
      err = null;
      this.argv = minimist(process.argv.slice(2));
      if (this.argv._.length !== 2) {
        err = new Error("need 2 arguments: <SD-dir> <photo-archive-dir>");
      } else {
        this.sd = new Indexer(this.argv._[0]);
        this.archive = new Indexer(this.argv._[1]);
      }
      return cb(err);
    };

    Runner.prototype.diff = function(cb) {
      var err, f, miss, _i, _len, _ref;
      miss = false;
      _ref = this.sd.ord;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        if (this.archive.map[f] == null) {
          console.log("M " + this.sd.map[f].path);
          miss = true;
        }
      }
      err = miss ? new Error("missing files!") : null;
      return cb(err);
    };

    Runner.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Runner::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/iced/check-sdcard/src/main.iced",
            funcname: "Runner.run"
          });
          _this.parse_args(esc(__iced_deferrals.defer({
            lineno: 79
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/iced/check-sdcard/src/main.iced",
              funcname: "Runner.run"
            });
            _this.index(esc(__iced_deferrals.defer({
              lineno: 80
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/iced/check-sdcard/src/main.iced",
                funcname: "Runner.run"
              });
              _this.diff(esc(__iced_deferrals.defer({
                lineno: 81
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    return Runner;

  })();

  exports.main = main = function() {
    var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/max/src/iced/check-sdcard/src/main.iced"
        });
        (new Runner).run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 87
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (typeof err !== "undefined" && err !== null) {
          log.error(err.toString());
        }
        return process.exit((typeof err !== "undefined" && err !== null ? -2 : 0));
      };
    })(this));
  };

}).call(this);
